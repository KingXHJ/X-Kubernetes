### Service Account
Service Account也是一种账号，但它并不是给Kubernetes集群的用户（系统管理员、运维人员、租户用户等）用的，而是给运行在Pod里的进程用的，它为Pod里的进程提供了必要的身份证明

一种类似HTTP Token的新认证方式——Service Account Auth

在每个命名空间中都有一个名为default的默认Service Account对象，在这个Service Account里面有一个名为Tokens的可以作为Volume被挂载到Pod里的Secret，Pod启动时，这个Secret会自动被挂载到Pod的指定目录下，用来协助完成Pod中的进程访问API Server时的身份鉴权

这个Secret有三个重要的数据：
1. token
1. ca.crt
1. namespace

![undefault-serviceaccount.yaml](./undefault-serviceaccount.yaml)

Service Account的正常工作离不开3个控制器：
1. Service Account Controller
    - Service Account Controller 的工作相对简单，它会监听  Service Account 和 Namespace 这两种资源对象的事件，如果在一个 Namespace 中没有默认的 Service Account，那么它会为该 Namespace 创建一个默认的 Service Account 对象，这就是在每个 Namespace 下都有一个名为 default Service Account 的原因
1. Token Controller
    - Token Controller 也监听 Service Account 的事件，如果发现在新建的 Service Account 里没有对应的 Service Account Secret, 则会用 API Server 私钥 （--service-account-private-key-file 指定的文件）创建一个 Token, 并用该 Token、API Server 的 CA 证书等三个信息产生一个新的 Secret 对象，然后放入刚才的 Service Account 中。如果监听到的事件是 Service Account 删除事件，则自动删除与该 Service Account 相关的所有 Secret。此外，Token Controller 对象也会同时监听 Secret 的创建和删除事件，确保与对应的 Service Account 的关联关系正确

1. Admission Controller
    - 针对 Pod 新增或修改的请求，Admission Controller 验证 Pod 里的 Service Account 是否合法，并做出如下控制操作：
        - 如果 spec.serviceAccount 域没有被设置，则 Kubernetes 默认为其指定名称为 default 的 Service accout
        - 如果 Pod 的 spec.serviceAccount 域指定了不存在的 Service Account，则该 Pod 操作会被拒绝
        - 如果在 Pod 中没有指定 ImagePullSecrets, 那么这个 spec.serviceAccount 域指定的 Service Account 的 ImagePullSecrets 会被加入该 Pod 中
        - 给Pod添加一个特殊的 volumeSource，在该Volume中包含Service Account Secret 中的Token
        - 给Pod里的每个容器都增加对那个的VolumeSource，将包含Secret的Volume挂载到Pod中所有容器的指定目录下（/var/run/secrets/kubenetes.io/serviceaccount）


#### 为什么创建两套独立的账号
- User账号是给人用的，Service Account账号是给Pod里的进程用的，面向的对象不同
- User账号是全局性的，Service Account则属于某个具体的命名空间
- 通常来说，User账号是与后端的用户数据库同步的，创建一个新用户时通常要走一套复杂的业务流程才能实现，Service Account的创建则需要极轻量级的实现方式，集群管理员可以很容易地为某些特定的任务创建一个Service Account
- 对于这两种不同的账号，其审计要求通常不同
- 对一个复杂的体统来说，多个组件通常拥有各种账号的配置信息，Service Account是在命名空间级别隔离的，可以针对组件进行一对一的定义，同时具备很好的“便携性”